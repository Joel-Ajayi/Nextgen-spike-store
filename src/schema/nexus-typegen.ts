/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context as ContextModule } from "./context"
import type { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CategoryFilterInput: { // input type
    isRequired: boolean; // Boolean!
    name: string; // String!
    type: string; // String!
  }
  LoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  NewCategoryInput: { // input type
    banners: Array<NexusGenScalars['Upload'] | null>; // [Upload]!
    description?: string | null; // String
    filters: Array<NexusGenInputs['CategoryFilterInput'] | null>; // [CategoryFilterInput]!
    image?: NexusGenScalars['Upload'] | null; // Upload
    name: string; // String!
    parentId?: string | null; // String
  }
  SignupInput: { // input type
    email: string; // String!
    fName: string; // String!
    lName: string; // String!
    password: string; // String!
  }
}

export interface NexusGenEnums {
  UserRole: 2 | 1 | 3 | 0
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Upload: any
}

export interface NexusGenObjects {
  Message: { // root type
    message: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    avater?: string | null; // String
    contactNumber?: string | null; // String
    email: string; // String!
    fName: string; // String!
    id: string; // ID!
    lName: string; // String!
    role: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Message: { // field return type
    message: string; // String!
  }
  Mutation: { // field return type
    createCategory: NexusGenRootTypes['Message'] | null; // Message
    login: NexusGenRootTypes['Message'] | null; // Message
    logout: NexusGenRootTypes['Message'] | null; // Message
    signup: NexusGenRootTypes['Message'] | null; // Message
  }
  Query: { // field return type
    userQuery: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    avater: string | null; // String
    contactNumber: string | null; // String
    email: string; // String!
    fName: string; // String!
    id: string; // ID!
    lName: string; // String!
    role: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Message: { // field return type name
    message: 'String'
  }
  Mutation: { // field return type name
    createCategory: 'Message'
    login: 'Message'
    logout: 'Message'
    signup: 'Message'
  }
  Query: { // field return type name
    userQuery: 'User'
  }
  User: { // field return type name
    avater: 'String'
    contactNumber: 'String'
    email: 'String'
    fName: 'String'
    id: 'ID'
    lName: 'String'
    role: 'Int'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCategory: { // args
      data?: NexusGenInputs['NewCategoryInput'] | null; // NewCategoryInput
    }
    login: { // args
      data?: NexusGenInputs['LoginInput'] | null; // LoginInput
    }
    signup: { // args
      data?: NexusGenInputs['SignupInput'] | null; // SignupInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ContextModule;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}