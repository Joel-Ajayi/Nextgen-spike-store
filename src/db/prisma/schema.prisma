// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PAYMENTSTATUS {
  PENDING
  CANCELLED
  REFUND
  COMPLETED
}

enum PAYMENTMETHOD {
  COD
  CARD
}

enum ORDERSTATUS {
  ORDERED
  PACKED
  SHIPPED
  DELIVERED
}

enum ADDRESSTYPE {
  HOME
  WORK
}

enum CatFilterType {
  Txt
  Num
  Range
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  fullName      String?
  displayName   String?
  avatar        String?
  contactNumber String?
  reviews       Reviews[]
  address       Address?
  orders        Order[]
  verified      Boolean   @default(false)
  role          Int       @default(0)
  pwd           String
  pwdToken      String?   @unique
  vToken        String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  description String?
  parentId    String?     @db.ObjectId
  parent      Category?   @relation("Category", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[]  @relation("Category")
  lvl        Int         @default(1)
  filterIds   String[]    @db.ObjectId
  filters     CatFilter[]
  image       String?
  banners     String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CatFilter {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  type           CatFilterType
  unit           String?
  options        String[]
  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String          @unique @db.ObjectId
  isRequired     Boolean         @default(true)
  productFilters ProductFilter[]
}

model Product {
  id             String                    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  sku            String                    @unique
  categoryId     String                    @db.ObjectId
  description    String
  amount         Float
  images         Bytes[]
  video          String
  reviews        Reviews[]
  rating         Int                       @default(0)
  countInStock   Int                       @default(0)
  allowCod       Boolean                   @default(false)
  discount       Int                       @default(0)
  brandId        String                    @db.ObjectId
  brand          Brand                     @relation(fields: [brandId], references: [id])
  colors         String[]
  deleveryRange  Int
  pkgHeight      Int
  pkgWidth       Int
  pkgBreath      Int
  pkgWeight      Int
  productionInfo ProductManufacturingInfo?
  filterIds      String[]                  @db.ObjectId
  filters        ProductFilter[]
  OrderItemIds   String[]                  @db.ObjectId
  OrderItems     OrderItem[]               @relation(fields: [OrderItemIds], references: [id])
  sellerId       String                    @db.ObjectId
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
}

model ProductManufacturingInfo {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  country           String
  productionDate    DateTime
  productionDetails String
  packerDetails     String
  productId         String   @unique @db.ObjectId
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductFilter {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  value     String[]
  optionId  String    @db.ObjectId
  option    CatFilter @relation(fields: [optionId], references: [id], onDelete: Cascade)
  productId String    @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]
}

model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   String?
  rating    Int      @default(0)
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Address {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?     @unique @db.ObjectId
  user           User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  address        String
  address2       String?
  pinCode        String?
  city           String
  state          String
  addressType    ADDRESSTYPE
  contactNumber  String
  contactNumber2 String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressId     String        @db.ObjectId
  paymentStatus PAYMENTSTATUS
  paymentMethod PAYMENTMETHOD
  orderStatus   OrderStatus[]
  totalAmount   Float
  items         OrderItem[]
}

model OrderItem {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  qty        Int
  amount     Float
  orderId    String?   @db.ObjectId
  order      Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  products   Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @unique @db.ObjectId
}

model OrderStatus {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  isCompleted Boolean     @default(false)
  date        DateTime    @default(now())
  status      ORDERSTATUS
  order       Order?      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String?     @db.ObjectId
}
