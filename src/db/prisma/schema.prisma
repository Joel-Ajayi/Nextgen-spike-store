// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PAYMENTSTATUS {
  pending
  cancelled
  refund
  completed
}

enum PAYMENTMETHOD {
  COD
  card
}

enum ORDERSTATUS {
  ordered
  packed
  shipped
  delivered
}

enum SellerType {
  all
  books
}

enum ADDRESSTYPE {
  home
  work
}

enum OPTIONTYPE {
  text
  number
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  fullName      String?
  displayName   String?
  avatar        String?
  contactNumber String?
  reviews       Reviews[]
  address       Address[]
  orders        Order[]
  verified      Boolean   @default(false)
  pwd           String
  pwdToken      String?   @unique
  vToken        String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Seller {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  email               String     @unique
  fullName            String
  displayName         String?
  businessName        String
  businessDescription String
  avatar              String?
  role                Int        @default(0) // 0=seller, 1=admin, 2=super-admin
  verified            Boolean    @default(false)
  accountName         String?
  accountNumber       Int?
  contactNumber       String
  createdCategories   Category[]
  businessAdress      Address[]
  orders              Order[]
  products            Product[]
  pwd                 String
  pwdToken            String?    @unique
  vToken              String?    @unique
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Category {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  parentId    String?          @unique @db.ObjectId
  parent      Category?        @relation("Category", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[]       @relation("Category")
  filterIds   String[]         @db.ObjectId
  filters     CategoryFilter[] @relation(fields: [filterIds], references: [id])
  image       String?
  banners     String[]
  desciption  String?
  createdById String           @db.ObjectId
  createdBy   Seller           @relation(fields: [createdById], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model CategoryFilter {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          OPTIONTYPE
  categories    Category[]      @relation(fields: [categoryIds], references: [id])
  categoryIds   String[]        @db.ObjectId
  isRequired    Boolean         @default(true)
  productFilter ProductFilter[]
}

model Product {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  categoryId   String          @db.ObjectId
  description  String
  amount       Float
  images       String[]
  video        String
  reviews      Reviews[]
  rating       Int             @default(0)
  countInStock Int             @default(0)
  allowCod     Boolean         @default(false)
  discount     Int             @default(0)
  brandId      String          @db.ObjectId
  brand        Brand           @relation(fields: [brandId], references: [id])
  filterIds    String[]        @db.ObjectId
  filters      ProductFilter[] @relation(fields: [filterIds], references: [id])
  OrderItemIds String[]        @db.ObjectId
  OrderItems   OrderItem[]     @relation(fields: [OrderItemIds], references: [id])
  sellerId     String          @db.ObjectId
  seller       Seller          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ProductFilter {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  filterId   String         @db.ObjectId
  filter     CategoryFilter @relation(fields: [filterId], references: [id])
  productIds String[]       @db.ObjectId
  product    Product[]      @relation(fields: [productIds], references: [id])
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  products Product[]
}

model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   String?
  rating    Int      @default(0)
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Address {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?     @db.ObjectId
  user           User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sellerId       String?     @db.ObjectId
  seller         Seller?     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  address        String
  address2       String?
  pinCode        String?
  city           String
  state          String
  addressType    ADDRESSTYPE
  contactNumber  String
  contactNumber2 String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressId     String        @db.ObjectId
  paymentStatus PAYMENTSTATUS
  paymentMethod PAYMENTMETHOD
  orderStatus   OrderStatus[]
  totalAmount   Float
  items         OrderItem[]
  Seller        Seller?       @relation(fields: [sellerId], references: [id])
  sellerId      String?       @db.ObjectId
}

model OrderItem {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  qty        Int
  amount     Float
  orderId    String?   @db.ObjectId
  order      Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  products   Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @unique @db.ObjectId
}

model OrderStatus {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  isCompleted Boolean     @default(false)
  date        DateTime    @default(now())
  status      ORDERSTATUS
  order       Order?      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String?     @db.ObjectId
}
