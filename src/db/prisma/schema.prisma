// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  fName         String
  lName         String
  avatar        String?
  contactNumber Int?
  reviews       Reviews[]
  address       Address[]
  orders        Order[]
  couponId      String[]
  verified      Boolean   @default(false)
  roles         Int[]
  pwd           String
  pwdToken      String?
  vToken        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  name                     String            @unique
  cId                      Int               @unique
  icon                     String?
  description              String?
  parentId                 String?           @db.ObjectId
  parent                   Category?         @relation("Category", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children                 Category[]        @relation("Category")
  lvl                      Int               @default(1)
  numSold                  Int               @default(0)
  hasWarrantyAndProduction Boolean           @default(false)
  brdId                    String?           @db.ObjectId
  brand                    Brand?            @relation(fields: [brdId], references: [id])
  banner                   CategoryBanner[]
  features                 CategoryFeature[]
  offers                   CategoryOffer[]
  products                 Product[]
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
}

model CategoryFeature {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  type            Int
  options         String[]
  category        Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String           @db.ObjectId
  useAsFilter     Boolean          @default(false)
  productFeatures ProductFeature[]
}

model CategoryBanner {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  image         String
  bannerColours String[]
  tagline       String
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String   @db.ObjectId
}

model CategoryOffer {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  type          Int // -0-flash sales -1- free shipping
  tagline       String
  image         String
  bannerColours String[]
  validUntil    String
  discount      Int
  audience      Int // -0-any-1-first-time-2-longtimeusers
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String   @db.ObjectId
}

// name-cat-brand-price-color
model Product {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  sku          String
  name         String
  cId          Int
  category     Category         @relation(fields: [cId], references: [cId], onDelete: Cascade)
  description  String
  price        Float //Naira
  images       String[]
  rating       Int              @default(0)
  count        Int              @default(0)
  paymentType  Int //PAYMENTMETHOD
  brdId        String           @db.ObjectId
  brand        Brand            @relation(fields: [brdId], references: [id])
  colours      String[]
  numSold      Int              @default(0)
  discount     Int              @default(0)
  aprroved     Boolean          @default(false)
  mfgCountry   String?
  mfgDate      String?
  warrDuration Int?
  warrCovered  String?
  features     ProductFeature[]
  reviews      Reviews[]
  OrderItems   OrderItem[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model ProductFeature {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  featureId String          @db.ObjectId
  feature   CategoryFeature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  productId String          @db.ObjectId
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  value     String
}

model Brand {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String     @unique
  image    String
  products Product[]
  Category Category[]
}

model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String?
  comment   String?
  rating    Int      @default(0)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId
  updatedAt DateTime @updatedAt
}

model Address {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  state       String
  city        String
  locality    String
  address     String
  addressType Int //0-HOME 1-WORK
  tel         Int
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingAddress String      @db.ObjectId
  paymentStatus   Int         @default(0) // 0-PENDING 1-CANCELLED 2-REFUNDED 3-COMPLETED
  paymentMethod   Int //0- card, 1-cod - 2-all
  status          Int         @default(0) //0-ORDERED 1-PACKED 2-SHIPPED 3-DELIVERED
  shippingAmount  Int
  subTotalAmount  Int
  pId             String
  totalAmount     Int
  items           OrderItem[]
  createdAt       DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  qty       Int
  price     Int
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
