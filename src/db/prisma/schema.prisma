// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PAYMENTSTATUS {
  PENDING
  CANCELLED
  REFUND
  COMPLETED
}

enum PAYMENTMETHOD {
  COD //0
  CARD //1
}

enum ORDERSTATUS {
  ORDERED
  PACKED
  SHIPPED
  DELIVERED
}

enum ADDRESSTYPE {
  HOME
  WORK
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  fName         String
  lName         String
  avatar        String?
  contactNumber String?
  reviews       Reviews[]
  address       Address?
  orders        Order[]
  verified      Boolean   @default(false)
  role          Int       @default(0)
  pwd           String
  pwdToken      String?   @unique
  vToken        String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String           @unique
  cId         Int              @unique
  description String?
  parentId    String?          @db.ObjectId
  parent      Category?        @relation("Category", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[]       @relation("Category")
  lvl         Int              @default(1)
  filters     CategoryFilter[]
  image       String?
  brdId       String?          @db.ObjectId
  brand       Brand?           @relation(fields: [brdId], references: [id])
  hasWarranty Boolean
  hasMfg      Boolean          @default(false)
  products    Product[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model CategoryFilter {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  type           String?
  unit           String?
  options        String[]
  category       Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String                @unique @db.ObjectId
  isRequired     Boolean               @default(true)
  productFilters CategoryFilterValue[]
}

model CategoryFilterValue {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  values    String[]
  optionId  String         @db.ObjectId
  option    CategoryFilter @relation(fields: [optionId], references: [id], onDelete: Cascade)
  productId String         @db.ObjectId
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// name-cat-brand-price-color
model Product {
  id           String                @id @default(auto()) @map("_id") @db.ObjectId
  sku          String                @unique
  name         String
  cId          Int
  category     Category              @relation(fields: [cId], references: [cId], onDelete: Cascade)
  description  String
  price        Float //Naira
  images       String[]
  rating       Int                   @default(0)
  count        Int                   @default(0)
  payment      Int[] //PAYMENTMETHOD
  brdId        String                @unique @db.ObjectId
  brand        Brand                 @relation(fields: [brdId], references: [id])
  colors       String[]
  discount     Int                   @default(0)
  aprroved     Boolean               @default(false)
  mfgCountry   String?
  mfgDate      String?
  warrDuration Int?
  warrCovered  String?
  filters      CategoryFilterValue[]
  reviews      Reviews[]
  OrderItemIds String[]              @db.ObjectId
  OrderItems   OrderItem[]           @relation(fields: [OrderItemIds], references: [id])
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model Brand {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String     @unique
  image    String
  products Product[]
  Category Category[]
}

model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   String?
  rating    Int      @default(0)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId
}

model Address {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?     @unique @db.ObjectId
  user           User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  address        String
  address2       String?
  pinCode        String?
  city           String
  state          String
  addressType    ADDRESSTYPE
  contactNumber  String
  contactNumber2 String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressId     String        @db.ObjectId
  paymentStatus PAYMENTSTATUS
  paymentMethod PAYMENTMETHOD
  orderStatus   OrderStatus[]
  totalAmount   Float
  items         OrderItem[]
}

model OrderItem {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  qty        Int
  amount     Float
  orderId    String    @db.ObjectId
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  products   Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @unique @db.ObjectId
}

model OrderStatus {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  isCompleted Boolean     @default(false)
  date        DateTime    @default(now())
  status      ORDERSTATUS
  order       Order?      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String?     @db.ObjectId
}
