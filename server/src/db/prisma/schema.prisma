// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PAYMENTSTATUS {
  pending
  cancelled
  refund
  completed
}

enum PAYMENTMETHOD {
  COD
  card
}

enum ORDERSTATUS {
  ordered
  packed
  shipped
  delivered
}

enum BRANDS {
  HP
  DELL
  Nike
  PUMA
  Adidas
  Google
  TECNO
  Apple
  Amazon
  SAMSUNG
  Gucci
  Xiaomi
  Lenovo
  ASUS
  LOUIS_VUITTON
  Dior
}

enum ADDRESSTYPE {
  home
  work
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  email             String     @unique
  fName             String
  lName             String
  username          String     @unique
  password          String
  avatar            String?
  role              Int       @default(0) // 0=user, 1 = seller, 2 = admin, 3 = super-admin
  contactNumber     String?
  passwordReset     String?
  createdCategories Category[]
  reviews           Reviews[]
  address           Address[]
  orders            Order[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  childrenId  String[]   @unique @db.ObjectId
  children    Category[] @relation("Category", fields: [childrenId], references: [id])
  parentsId   String[]   @unique @db.ObjectId
  parents     Category[] @relation("Category", fields: [parentsId], references: [id])
  desciption  String?
  title       String?
  view        String?
  banners     String[]
  createdBy   User?     @relation(fields: [createdById], references: [id])
  createdById String?   @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  image       String?
}

model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  comment   String?
  rating    Int      @default(0)
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Product {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  categoryId   String     @db.ObjectId
  description  String
  amount       Float
  images       String[]
  reviews      Reviews[]
  rating       Int        @default(0)
  countInStock Int        @default(0)
  brand        BRANDS
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  OrderItems   OrderItem?
}

model Address {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  user         User        @relation(fields: [userId], references: [id])
  address      String
  pinCode      String?
  city         String
  locality     String
  State        String
  addressType  String?
  mobileNumber String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  type         ADDRESSTYPE
}

model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  addressId       String        @db.ObjectId
  paymentStatus   PaymentStatus @relation(fields: [paymentStatusId], references: [id])
  paymentMethod   PAYMENTSTATUS
  orderStatus     OrderStatus[]
  totalAmount     Float
  items           OrderItem[]
  paymentStatusId String        @unique @db.ObjectId
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  qty       Int
  amount    Float
  order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String? @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique @db.ObjectId
}

model OrderStatus {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  isCompleted Boolean     @default(false)
  date        DateTime    @default(now())
  status      ORDERSTATUS
  order       Order?      @relation(fields: [orderId], references: [id])
  orderId     String?     @db.ObjectId
}

model PaymentStatus {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  status PAYMENTSTATUS
  order  Order?
}
